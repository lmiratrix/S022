---
title: "Doing things over and over again"
author: "Luke Miratrix"
date: "`r Sys.Date()`"
output: pdf_document
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE, 
                      fig.width = 5,
                      fig.height = 3,
                      out.width = "5in", 
                      out.height = "3in", fig.align = "center")

knitr::opts_chunk$set(echo = TRUE)
library( tidyverse )
```


In this handout, we will look at several ways of doing things over and over again in R. This comes up all the time. Three main ones we have seen are the following:

 * Fit a loess curve to my data for each of a series of smoothing parameters.
 * Repeatidly bootstrap my dataset and analyze it.
 * Run a simulation where we generate data and analyze it over and over.
 * Scrape a series of web pages
 
Coding wise, there are a few ways of repeating yourself.  We are going to walk through them and compare these tools to each other.

# The `replicate()` command

This simple command repeats a line of code a given number of times. If the line of code gives you a number back each time it is run, then you will end up with a list of numbers.

To illustrate, say we want to look at rolling dice. Here is some code that provides a function that will roll some number of 6-sided dice:

```{r}
roll_dice = function( ndice ) {
    rolls = sample( 1:6, ndice, replace=TRUE )
    sum( rolls )
}

# Roll a single die
roll_dice( 1 )

# Roll 3 dice and add them up.
roll_dice( 3 )
```
 
If we want to get the sum of three dice over and over, we can replicate:
```{r}
rolls = replicate( 10, roll_dice( 3 ) )
rolls
```

Note how the `rolls` variable is a nice numeric vector, easy to work with. It is easy to do calculations with it, like take the average:
```{r}
mean( rolls )
```

Here we use this to see how often we roll above a 15:
```{r}
rolls = replicate( 10000, roll_dice( 3 ) )
mean( rolls > 15 )
```

\newpage

# The `rerun()` command

The `rerun()` command, from the tidyverse, is almost exactly like replicate, but instead of giving a numeric vector of numbers back, it gives an R list.  For brevity, I rerun twice in the following:

```{r}
rolls = rerun( 2, roll_dice(3) )
rolls
```

Each element of the list is itself a list of numbers!  Why would someone make such an annoying command like that?  This is useful if the function we are rerunning gives us back multiple things.  For example:

```{r}
roll_dice_extended = function( ndice ) {
    rolls = sample( 1:6, ndice, replace=TRUE )
    c( mean = mean( rolls ), median = median( rolls ), max = max( rolls ) )
}
roll_dice_extended()
```

Now when we rerun we get this:
```{r}
rolls = rerun( 2, roll_dice_extended(3) )
rolls
```

But this is hard to work with.  All our numbers are nested and weird.  But there is a solution, which is the "rerun + bind_rows combo".  Once we have a list of our answers, we can "stack" them with `bind_rows`:
```{r}
bind_rows( rolls )
```

We can also give each row a name:
```{r}
bind_rows( rolls, .id="runID" )
```

**Side Note:** I recommend making your function give back a simple little dataframe of all your stuff.  It is less prone to having weird errors.  The `bind_rows()` method does really well with data.frames or tibbles.  Here is an updated version of the above:

```{r}
roll_dice_extended = function( ndice ) {
    rolls = sample( 1:6, ndice, replace=TRUE )
    data.frame( mean = mean( rolls ), median = median( rolls ), max = max( rolls ) )
}
roll_dice_extended()

rolls = rerun( 6, roll_dice_extended(3) )
rolls = bind_rows( rolls, .id="runID" )

rolls
```

## Warning: `replicate()` doesn't do well with fancy functions

The `replicate()` command doesn't act nice in the following:
```{r}
rolls = replicate( 2, roll_dice_extended(3) )
rolls
```

That doesn't look like a fun thing to work with.  (It is a 3 dimensional array of output, in case you are wondering.)  Use `rerun + bind_rows`; it is easier to control and understand.


## Take-away

If your function that you want to repeat returns a single number with each call, use `replicate()`.  If it returns more than one thing, use the `rerun() + bind_rows()` combination.


\newpage

# `map()`, another way of repeating yourself

The above runs the exact same code over and over.  Sometimes you want to run the same function on a collection of different things (e.g., fit a loess line for each of a series of bandwidths).  This is done with the `map()` command which takes a list of things, and then calls a function for each thing on that list.

To illustrate, we will see how the largest number rolled changes as a function of the number of dice rolled.  To start, let's roll 1 die, then 2 dice, then 3 dice, and each time calculate the average, median, and max:

```{r}
dice = 1:3
result = map( dice, roll_dice_extended )
result
```

Note unlike `rerun` or `replicate` we are not **calling** our `roll_dice_extended` function, we are just giving the name of it. You can tell since we do not have the `()` after `roll_dice_extended`, we just pass the name of the function we want to call. We are asking `map` to call `roll_dice_extended` over and over.  For `rerun` or `replicate`, by comparison, we provide a stand-alone complete line of code that would run by itself.  For `map` we just give the name of a function to run.

We can make our output nicer with the same `bind_rows` trick from `rerun()`:
```{r}
bind_rows( result )
```

Even better is using the `map_df()` method, which works nicely **provided your function returns a dataframe**:
```{r}
result = map_df( dice, roll_dice_extended )
result$ndice = dice
result
```

\newpage

# Repeating yourself when you are repeating yourself

Our little simulation is a bit sad in that we only have a single trial for each of our number of dice scenarios.  What we really want is to know the distribution of the maximum roll for each number of dice.  We do this by repeating ourself and then repeating this repeating ourself!

Study this:
```{r}
one_trial = function( ndice ) {
    rolls = rerun( 1000, roll_dice_extended( ndice ) )
    rolls = bind_rows( rolls )
    tbl = table( rolls$max )
    tbl
}
one_trial( 1 )
```

Then this:
```{r, cache=TRUE}
result = map( 1:6, one_trial )
result = bind_rows( result )
result$ndice = 1:6
result
```

We can then make a nice plot:
```{r}
resL = pivot_longer( result, `1`:`6`, 
                     names_to="roll", values_to="freq" ) %>%
    filter( !is.na( freq ) )
resL$freq = as.numeric( resL$freq )
ggplot( resL, aes( roll, freq ) ) +
    facet_wrap( ~ndice ) +
    geom_col( )
```

**Note.** The `as.numeric` line is because the table command makes table objects which are really just lists of numbers, but it seems cleaner to tell R to knock it off and just let it be a number.  Not doing this still works fine, it just gives a warning in `ggplot()`

\newpage

# Advanced stuff

In the following we look at a few cool functions that help with mapping.

## `relocate()`
Not really mapping specific, but still a nice way to move a variable to the start of a data frame.

```{r}
relocate( resL, freq )
```


## `pull()`
This will	grab a column from a data frame in a list of pipe commands, which can make it easier to plug into some other tools.

Here we pull the roll column and then hand it to the `table()` command to count the number of instances of each roll.
```{r}
resL %>% pull( roll ) %>%
  table()
```


## `set_names( list, names )`

On the fly name a list before handing to map!

```{r}
dice = 2:6
dice %>% set_names( paste0( dice, " dice" ) ) %>%
  map_df( roll_dice_extended, .id = "scenario" )
```

## `unpack()` and `pack()`

These will translate a data frame column into individual columns.  You can end up with a data frame column if you use map to make a new column in your data:

```{r}
scenarios = tibble( n_dice = 1:6 )
scenarios = scenarios %>%
  mutate( result = map_df( n_dice, roll_dice_extended ) )
scenarios
```

Notice the weird `$` in the printout?  This is because the three columns are inside the dataframe of `result`.  You can unpack it like so:
```{r}
unpack( scenarios, result )
```
to get your nice, normal dataframe.
