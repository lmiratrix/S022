---
title: "An R Code Style Guide (Miratrix version)"
author: "Luke Miratrix, adapted from Peter Ganong via Avi Feller"
date: '`r Sys.Date()`'
output:
  pdf_document: default
  html_document: default
  beamer_presentation:
    toc: true
    fig_width: 6
    fig_height: 4
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(nycflights13)
options(width = 50, tibble.print_min = 4, tibble.print_max = 12, digits = 3)
#knitr::knit_hooks$set(mysize = function(before, options, envir) {
#  if (before) {
#    return(options$size)
#  }
#})
```

```{r, echo = FALSE, out.width = "100%"}
knitr::include_graphics("image/code_quality.png")
```

## Why have coding style?

Many style decisions in coding are arbitrary, so why bother adhering to them? The primary reasons are that good style makes your code more readable, allows you to focus on writing quality code rather than worrying about inconsistencies, and helps you avoid being judged negatively for poor style.

More importantly, if you write in a clean style, you will be able to read your own code a few weeks later, when you have forgotten what you have been thinking.  It also makes it _a lot_ easier for the teaching team to help you understand possible problems in your code.

In this chapter, I lay out some tips for writing clean code.
Much of this was initially taken from the Tidyverse style guide at <http://style.tidyverse.org>; we are primarily focusing on Chapters 2 and 4. But I will note that I depart substantially from some of their recommendations.

The cartoon is [xkcd](https://xkcd.com/); read those if you want to be an awesome nerd.

For further reading about coding practice, also see [Code and Data for the Social Sciences: A Practitioner's Guide](https://web.stanford.edu/~gentzkow/research/CodeAndData.pdf), Gentzkow and Shapiro.  Worth a skim!


## The naming of things

> **"There are only two hard things in Computer Science: [cache invalidation](https://en.wikipedia.org/wiki/Cache_invalidation) and naming things."** ---Phil Karlton

-   Variable and function names should be lowercase.
-   Use an underscore to separate words within a name.
-   Generally, variable names should be nouns and function names should be verbs.
-   Ideally, your names should be self-explanatory and your code should be "self-documenting."
-   Avoid using numbers to store versions of a data frame (e.g., `df1`, `df2`, `df3`, ...).
-   Names for variables, functions, files, etc. should generally consist of complete words.
-   Naming is hard. more art than science.

```{r,  eval = FALSE}
# Good
day_one
first_day

# Bad
first_day_of_the_month
DayOne
dayone
djm1
```

### Don't use common names

If R uses a name already, just avoid it.

```{r, eval = FALSE}
# Bad
TRUE <- FALSE
pi <- 10
mean <- function(x) sum(x)
```

### Name constants for clarity

```{r,  eval = FALSE, mysize=TRUE, size = '\\scriptsize'}
# Good
winsor_upper <- 0.99
winsor_lower <- 0.01
diamonds <-
  diamonds %>%
  mutate(y_winsor = winsorize(y, probs = c(winsor_lower, winsor_upper)))

# Mediocre
diamonds_clean <-
  diamonds %>%
  mutate(y = winsorize(y, probs = c(0.01, 0.99)))
```



## Syntax

### Appropriate spaces make code readable

-   Put a space before and after `=` when naming arguments in function calls.
-   Always put a space after a comma, and never before (just like in regular English).

```{r  eval = FALSE}
# Good
average <- mean(x, na.rm = TRUE)

# Also good
average <- mean( x, na.rm = TRUE )

# Bad
average<-mean(x, na.rm = TRUE)
average <- mean(x ,na.rm = TRUE)
```

### Judicious spaces group elements to increase readability

-   Most infix operators (`==`, `+`, `-`, `<-`, etc.) should be surrounded by spaces.
-   The exception are those with relatively [high precedence](http://stat.ethz.ch/R-manual/R-patched/library/base/html/Syntax.html): `^`, `:`, `::`, and `:::`. ("High precedence" means that these operators are evaluated first, like multiplication goes before addition.)

```{r, eval = FALSE}
# Good
height <- (feet * 12) + inches
sqrt(x^2 + y^2)
x <- 1:10
base::get

# Bad
height<-feet*12 + inches
sqrt(x ^ 2 + y ^ 2)
x <- 1 : 10
base :: get
```

### Lots of spaces to line things up is nice

Extra spacing (i.e., more than one space in a row) is ok if it improves alignment of equal signs or assignments (\<-).

```{r  eval = FALSE}
# Good
list(
  total = a + b + c,
  mean  = (a + b + c) / n
)

# Less good, but livable
list(
  total = a + b + c,
  mean = (a + b + c) / n
)
```

### Including names when calling functions

A function typically takes several arguments, namely the **data** to compute on and further arguments giving the **details** of the desired computation.

Omit names of common arguments (e.g. `data`, `aes`).

If you override the default value of an argument, use the full name:

```{r, eval = FALSE}
# Good
mean(1:10, na.rm = TRUE)

# Bad
mean(x = 1:10, , FALSE)
mean(, TRUE, x = c(1:10, NA))
```

### No line of code should be longer than 80 characters

-   use one line each for the function name, each argument, and the closing ')'.
-   use indentation to make it clear that the arguments are part of the function call.


```{r, eval = FALSE, mysize = TRUE, size = '\\scriptsize'}
# Good
do_something_very_complicated(
  something = "that",
  requires = many,
  arguments = "some of which may be long"
)

# Very bad
do_something_very_complicated(something = "that", requires = many, arguments = "some of which may be long")

# Still bad
do_something_very_complicated(
  something = "that", requires = many,
  arguments = "some of which may be long"
)

# Yup, still bad
do_something_very_complicated(
  something = "that", requires = many, arguments =
  "some of which may be long"
)
```

Exception to the above: short unnamed arguments can also go on the same line as the function name, even if the whole function call spans multiple lines.

```{r, eval = FALSE}
# Good
map(x, f,
  extra_argument_a = 10,
  extra_argument_b = c(1, 43, 390, 210209)
)
```

### Use `<-` for assignment (if you are prissy)

Use `<-`, not `=`, for assignment.

```{r echo = TRUE}
# Good
x <- 5

# Upsets the nitpickers
x = 5
```

### Double quotes are standard

Use `"`, not `'`, for quoting text. The only exception is when the text already contains double quotes and no single quotes.

```{r, eval=FALSE}
# Good
"Text"
'Text with "quotes"'
'<a href="http://style.tidyverse.org">A link</a>'

# Bad
"Text"
'Text with "double" and \'single\' quotes'
```

### Comments are good

Comments can really help with code, and help a reader assess if the code is achiving the desired effect.  Comments should give the purpose of the code, not just restate the code in English.

That said, commends can be dangerous because if you change your code without changing the comments, you can cause confusion.  This happens a lot, potentially making comments a source of confusion rather than clarity.


## Pipes (`%>%`) with `magrittr`

Use `%>%` (or `|>`, if you are modern) to emphasise a sequence of actions, rather than the object that the actions are being performed on.

Avoid using the pipe when:

-   You need to manipulate more than one object at a time. Reserve pipes for a sequence of steps applied to one primary object.

-   There are meaningful intermediate objects that could be given informative names (cf rule 2.9).

### Surround the pipe with whitespace

-   `%>%` should always have a space before it, and should usually be followed by a new line. 
-   After the first step, each line should be indented by two spaces. 

Adhering to the above structure makes it easier to add new steps (or rearrange existing steps) and makes it harder to overlook a step.

```{r, eval = FALSE}
# Good
iris %>%
  group_by(Species) %>%
  summarize_if(is.numeric, mean) %>%
  ungroup() %>%
  gather(measure, value, -Species) %>%
  arrange(value)

# Bad
iris %>% group_by(Species) %>% summarize_all(mean) %>% 
ungroup() %>% gather(measure, value, -Species) %>%
arrange(value)
```

### Formatting short pipes

It is ok to keep a one-step pipe in one line, if you want.  But not doing so is also fine.

```{r, eval = FALSE}
# Good
iris %>% arrange(Species)

# Also good
iris %>%
  arrange(Species)

arrange(iris, Species)
```

### Do not pack pipes inside of other pipes

This is brain-hurty:

```{r, eval = FALSE, mysize=TRUE, size = '\\small'}
# Bad
x %>%
  select(a, b, w) %>%
  left_join(
    y %>% filter(!u) %>% gather(a, v, -b) %>% select(a, b, v),
    by = c("a", "b")
  )
```

Instead, separate the pipes into their own lines:

```{r, eval = FALSE}
# Good

x_join <- x %>%
  select(a, b, w)
y_join <- y %>%
  filter(!u) %>%
  gather(a, v, -b) %>%
  select(a, b, v)
left_join(x_join, y_join, by = c("a", "b"))
```

Generally when you are doing something to two datasets, put both inside the parenthesis, rather than having one in and one piped in.


### Keep your parenthesis even if you have no arguments

magrittr allows you to omit `()` on functions that don't have arguments. Avoid this. This way data objects never have parentheses and functions always do.

```{r, eval = FALSE}
# Good
x %>%
  unique() %>%
  sort()

# Bad
x %>%
  unique %>%
  sort
```

### Rule 4.6: Assignment

The first line can have the assignment and also the starting dataframe of a pipe sequence.

```{r, eval = FALSE}
# Good
iris_long <- iris %>%
  gather(measure, value, -Species) %>%
  arrange(-value)
```


## A few final remarks

-   Style is awesome. Save a future researcher from spending months trying to disentangle your spaghetti!
-   You don't need to memorize these rules! Just as you have spell check and grammarly on your computer for prose, there is a package `styler` to help you follow the code style guide.
-   Just as you still need to learn to spell (since spell checker doesn't capture everything), you need to learn these rules as well.

In closing:

> *"Good coding style is like correct punctuation: you can manage without it, butitsuremakesthingseasiertoread."* ---Hadley Wickham
